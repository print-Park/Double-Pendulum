import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
import numpy as np


# Define constants
G = 9.81  # acceleration due to gravity (m/s^2)
L1 = 1.0  # length of pendulum 1 (m)
L2 = 1.0  # length of pendulum 2 (m)
M1 = 1.0  # mass of pendulum 1 (kg)
M2 = 1.0  # mass of pendulum 2 (kg)

def derivs(state):
    theta1, omega1, theta2, omega2 = state
    dtheta1_dt = omega1
    domega1_dt = (-G * (2 * M1 + M2) * np.sin(theta1) - M2 * G * np.sin(theta1 - 2 * theta2) - 2 * np.sin(theta1 - theta2) * M2 * (omega2 ** 2 * L2 + omega1 ** 2 * L1 * np.cos(theta1 - theta2))) / (L1 * (2 * M1 + M2 - M2 * np.cos(2 * theta1 - 2 * theta2)))
    dtheta2_dt = omega2
    domega2_dt = (2 * np.sin(theta1 - theta2) * (omega1 ** 2 * L1 * (M1 + M2) + G * (M1 + M2) * np.cos(theta1) + omega2 ** 2 * L2 * M2 * np.cos(theta1 - theta2))) / (L2 * (2 * M1 + M2 - M2 * np.cos(2 * theta1 - 2 * theta2)))
    return np.array([dtheta1_dt, domega1_dt, dtheta2_dt, domega2_dt])


def rk4_step(state, dt):
    k1 = derivs(state)
    k2 = derivs(state + 0.5 * dt * k1)
    k3 = derivs(state + 0.5 * dt * k2)
    k4 = derivs(state + dt * k3)
    return state + (dt / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4)

def wrap_angle(theta):
    return (theta + np.pi) % (2 * np.pi) - np.pi

def calculate_energy(state):
    theta1, omega1, theta2, omega2 = state
    # Kinetic energy
    K1 = 0.5 * M1 * (L1 * omega1)**2
    K2 = 0.5 * M2 * ((L1 * omega1)**2 + (L2 * omega2)**2 + 2 * L1 * L2 * omega1 * omega2 * np.cos(theta1 - theta2))
    K = K1 + K2

    # Potential energy
    U1 = -M1 * G * L1 * np.cos(theta1)
    U2 = -M2 * G * (L1 * np.cos(theta1) + L2 * np.cos(theta2))
    U = U1 + U2

    # Total mechanical energy
    E = K + U
    return E

def generate_initial_conditions(total_energy, num_conditions):
    initial_conditions = []

    while len(initial_conditions) < num_conditions:
        theta1 = np.random.uniform(-np.pi, np.pi)
        theta2 = np.random.uniform(-np.pi, np.pi)
        omega2 = np.random.uniform(-3, 3)

        # Calculate potential energy
        U1 = -M1 * G * L1 * np.cos(theta1)
        U2 = -M2 * G * (L1 * np.cos(theta1) + L2 * np.cos(theta2))
        U = U1+U2

        # Remaining energy to be distributed as kinetic energy
        K = total_energy - U

        # Calculate omega1 based on the remaining kinetic energy
        A = 0.5 * (M1 * L1**2 + M2 * L1**2)
        B = M2 * L1 * L2 * omega2 * np.cos(theta1 - theta2)
        C = 0.5 * M2 * L2**2 * omega2**2 - K

        discriminant = B**2 - 4*A*C

        if discriminant < 0:
            continue

        omega1_pos = (-B + np.sqrt(discriminant)) / (2*A)
        omega1_neg = (-B - np.sqrt(discriminant)) / (2*A)
        initial_conditions.append([theta1, omega1_pos, theta2, omega2])

    return initial_conditions

# Time parameters
t_start = 0
t_end = 600
dt = 0.0025
t_points = np.arange(t_start, t_end, dt)

# Simulate and plot PoincarÃ© sections for multiple initial conditions
num_conditions = 1
total_energy = -18.0  # Total mechanical energy for initial conditions

plt.figure(figsize=(10, 8))

# Generate initial conditions
initial_conditions = generate_initial_conditions(total_energy, num_conditions)

energy = []

for i, state in enumerate(initial_conditions):
    state = np.array(state)
    # Simulate
    xdata = []
    ydata = []
    zdata = []
    energy = []
    prev_theta1 = state[0]
    for t in t_points:
        state[0] = wrap_angle(state[0])  # Wrap theta1
        state[2] = wrap_angle(state[2])  # Wrap theta2
        state = rk4_step(state, dt)
        energy.append(calculate_energy(state))
        xdata.append(state[0])
        ydata.append(state[2])
        zdata.append(state[3])


ax = plt.axes(projection='3d')
ax.scatter3D(xdata, ydata, zdata, c=xdata, cmap='Greens');
ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel(r'Z label')
plt.show()
